/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LoginDialog.java
 *
 * Created on May 26, 2010, 11:32:12 AM
 */

package my.controlroomapp;

//import java.beans.Statement;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;

/**
 *
 * @author Riad
 */


public class LoginDialog extends javax.swing.JDialog {

    private static final int RUN_PORT = 9598;
    /** Creates new form LoginDialog */
    public LoginDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
        // Set System L&F
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (javax.swing.UnsupportedLookAndFeelException e) {
        // handle exception
        }
        catch (ClassNotFoundException ce) {
        // handle exception
        }
        catch (InstantiationException ie) {
        // handle exception
        }
        catch (IllegalAccessException le) {
        // handle exception
        }
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userLabel = new javax.swing.JLabel();
        pwdLabel = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        pwdField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Control Room App Login");
        setBackground(java.awt.Color.lightGray);
        setBounds(new java.awt.Rectangle(120, 140, 0, 0));
        setResizable(false);

        userLabel.setText("User:");

        pwdLabel.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userLabel)
                            .addComponent(pwdLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pwdField, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(userTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)))
                    .addComponent(loginButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clearButton, loginButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdLabel)
                    .addComponent(pwdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(loginButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        userTextField.setText("");
        pwdField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        try {
            //Load XML config file
            LoadXmlProperties.loadXmlFile();
            
            INCommander inCmd = new INCommander();
            String loginRes = inCmd.logIn(userTextField.getText(), new String(pwdField.getPassword()));

            if (loginRes != null) {
                java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(loginRes,",");
                String userName = null, userRole =  null;
                while(tokenizer.hasMoreTokens()) {
                    userRole = tokenizer.nextToken();
                    userName = tokenizer.nextToken();
                }
                HuaweiHLR msc = new HuaweiHLR(LoadXmlProperties.CLI_USER, LoadXmlProperties.CLI_LOCAL_USER);
                /*
                    msc = new MSCCommander(LoadXmlProperties.CLI_SERVER, LoadXmlProperties.CLI_USER,
                            LoadXmlProperties.CLI_LOCAL_USER);
                 * 
                 */
                ControlRoomUI ctrlUI = new ControlRoomUI(inCmd, msc, userName, Short.parseShort(userRole));
                this.setVisible(false);
                ctrlUI.setVisible(true);
                ctrlUI.setEnabled(true);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this,"Unrecognized "+
                        "user name/password","Login Fail",JOptionPane.ERROR_MESSAGE);
                pwdField.setText("");
            }

        } catch (java.sql.SQLException sqle) {
            javax.swing.JOptionPane.showMessageDialog(this,"Unable to Connect "+
              "to Database","SQL Error",JOptionPane.ERROR_MESSAGE);
            System.out.println("Error Details: "+sqle.getMessage()+"\n"+sqle.getErrorCode());
        } catch (java.lang.ClassNotFoundException cnf) {
            javax.swing.JOptionPane.showMessageDialog(this, "Unable to Load JDBC Drivers");
            System.out.println("Driver Error: "+cnf.getLocalizedMessage());
        } catch (java.net.UnknownHostException ue) {
            javax.swing.JOptionPane.showMessageDialog(this,"Unable to acquire IP","I/O Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (java.lang.IllegalAccessException iae) {
            javax.swing.JOptionPane.showMessageDialog(this,"IllegalAccessException","Access Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (java.lang.InstantiationException ine) {
            javax.swing.JOptionPane.showMessageDialog(this,"InstantiationException","Driver Instance Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        
        //The serversocket is instantiated to limit the number of instances running on a single PC to one.
        try { 
            java.net.ServerSocket ss = new java.net.ServerSocket(RUN_PORT); 
        } 
        catch (java.net.BindException ex) { 
                JOptionPane.showMessageDialog(null,"Control Room App already running","",
                        JOptionPane.ERROR_MESSAGE); 
                System.exit(1); 
        }
        catch (java.io.IOException ex) { 
                ex.printStackTrace(); 
                System.exit(1);
        } 

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoginDialog dialog = new LoginDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField pwdField;
    private javax.swing.JLabel pwdLabel;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables

}
